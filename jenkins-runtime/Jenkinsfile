properties([
    parameters ([
        string(name: 'DOCKER_REGISTRY_DOWNLOAD_URL', defaultValue: 'nexus-docker-private-group.ossim.io', description: 'Repository of docker images'),
        string(name: 'BUILD_NODE', defaultValue: 'omar-build', description: 'The build node to run on'),
        string(name: 'OSSIM_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim'),
        string(name: 'OSSIM_PLUGINS_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim plugins'),
        string(name: 'OSSIM_OMS_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim oms'),
        string(name: 'OSSIM_VIDEO_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim video'),
        string(name: 'OSSIM_DEEPCORE_BRANCH', defaultValue: 'dev', description: 'The branch to use for ossim deepcore'),
        string(name: 'OSSIM_BUILDER_VERSION', defaultValue: '1.0.1', description: 'The version of the ossim builder to be used'),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')

    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-centos.git'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
podTemplate(
    containers: [
    containerTemplate(
        name: 'git',
        image: 'alpine/git:latest',
        ttyEnabled: true,
        command: 'cat',
        envVars: [
            envVar(key: 'HOME', value: '/root')
        ]
    ),
    containerTemplate(
      name: 'docker',
      image: 'docker:19.03.8',
      ttyEnabled: true,
      command: 'cat',
      privileged: true
    ),
    containerTemplate(
      image: "${DOCKER_REGISTRY_DOWNLOAD_URL}/ossim-builder-minimal-centos:${OSSIM_BUILDER_VERSION}",
      name: 'builder',
      command: 'cat',
      ttyEnabled: true
    )
  ],
  volumes: [
    hostPathVolume(
      hostPath: '/var/run/docker.sock',
      mountPath: '/var/run/docker.sock'
    )
  ]
)
{
timeout(time: 60, unit: 'MINUTES') {
    node(POD_LABEL){

        stage("Checkout")
        {
            checkout(scm)
        }

        stage("Load Variables")
        {
            withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
                step ([$class: "CopyArtifact",
                    projectName: o2ArtifactProject,
                    filter: "common-variables.groovy",
                    flatten: true])
            }

            load "common-variables.groovy"
        }

        stage ("Checkout Source Code") 
        {  
            container('git'){  
                dir("compile-ossim"){
                    dir("ossim-repos/ossim-deepcore"){
                        git(
                            url: 'git@github.com:Maxar-Corp/ossim-deepcore.git',
                            credentialsId: 'ossimlabs-minion-ssh-key',
                            branch: "master"
                        )
                    }
                    sh """
                        apk update && apk add bash
                        ./checkout-ossim.sh
                        cd ossim-repos/ossim-deepcore
                        git checkout ${OSSIM_DEEPCORE_BRANCH}
                    """
                }
            }
        }  

        stage ("Build Ossim")
        {
            container('builder'){
                        sh """
                            mkdir /output
                            mv ./compile-ossim/ossim-repos/* /work
                            mv ./compile-ossim/build-scripts/* /build-scripts
                            cd /work
                            /build-scripts/build-ossim.sh
                            mv /output/ ${WORKSPACE}/compile-ossim/output/

                        """
//                        aws s3 cp ${WORKSPACE}/compile-ossim/output/ s3://o2-delivery/deepcore/centos
                        //added to try and copy the tar file to s3 bucket
                         archiveArtifacts "compile-ossim/output/ossim-dist-minimal-centos.tgz"
                            }
                       }

      stage ("Publish to s3 bucket")
      {
            container('docker'){
            withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}") {
            environment {
            PATH=${WORKSPACE}/compile-ossim/output/
            }
            sh """
            docker run --rm amazon/aws-cli:latest s3 cp ${WORKSPACE}/compile-ossim/output/ s3://o2-delivery/deepcore/centos
            """
                   }
            }
      }
//
//      export AWS_DEFAULT_REGION="us-east-1"
//                                                         export AWS_ACCESS_KEY_ID="e262167f-07f3-403c-912c-1211d7ae0a73"
//                                                         export AWS_SECRET_ACCESS_KEY="-----BEGIN PUBLIC KEY-----
//                                                                                       MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA8cySQxtmIU97R77OU27W
//                                                                                       rP5qSTT6Jz3sP/uZoL3wRsN3nnigmdoxUbCIFIZRtFtPvf9vM6vqbW9SUu3+I7w1
//                                                                                       ekHoLkSPY2ilb91/8NkqPvpjlSoESW/NKtw6FU0AJhgyvP2sUjQU3Cnhg1wawQyl
//                                                                                       fLrAyqSIll1Gpm8EpgLBbd2CsEwutR2W/tz6K+b3wnC05IGq93w48LsQuZWJ1ALN
//                                                                                       JbsNhAaBIsX1r9C8o6gjATUUYOAUgjsh12qI7qWyxuW881WPfVEvOWj2cU4qGAUp
//                                                                                       J4CAvkTD/QMuRqfbXXmW7OJe+KyOKvh1qfZ3ZktIz72YDemsE8McWSw2ufo/Nk0V
//                                                                                       gPC4OmJKiC7157528X10w2adgO+KYtS4uuT5v/MPOOlfnL028jak5rhd4+miNJ0U
//                                                                                       QF05BTDaiZpgEp8GCLTcH3ETE87gcC2kTRHpw//kZMB2SppJhOfx1bS0Y4+nt096
//                                                                                       ugDN6t71J8BRejjceVIaQvpoB99X6iJYXMIT+oQ6XfeLAgMBAAE=
//                                                                                       -----END PUBLIC KEY-----"
//                                                         aws s3 cp ${WORKSPACE}/compile-ossim/output/ s3://o2-delivery/deepcore/centos

//added cli stage
//   stage("Package CLI") {
//         sh """
//             ./gradlew bundleCliPlugins
//             tar cvfz smvcli.tgz smv-cli/build/install/smvcli
//         """
//     }
//          stage("Deliver Artifacts")
//                  {
//                          List entries = []
//
//                          // Add all tars above to S3 push
//                          if(params["SOURCE"]) {
//                              entries += [bucket                 : "o2-delivery/deepcore/centos",
//                                          selectedRegion         : 'us-east-1',
//                                          showDirectlyInBrowser  : true,
//                                          sourceFile             : "ossim-dist-minimal-centos.tgz",]
//                          }
//                          step([$class: 'S3BucketPublisher',
//                                dontWaitForConcurrentBuildCompletion: false,
//                                entries: entries,
//                                profileName: 'jenkins',
//                                userMetadata: []])

//                         for (entry in entries)
//                         {
//                             println("Archiving ${entry.sourceFile}")
//                             archiveArtifacts entry.sourceFile
//                         }
//                   }


        stage ("Build Runtime Image")
        {
            container('docker'){
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_DOWNLOAD_URL}") {
                    dir("runtime") {
                        sh """
                            ./build-docker.sh --network=host
                        """

                    }
                }
            }
        }

        stage ("Publish Docker Image")
        {
            container('docker'){
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}") {

                    sh """
                        docker tag ossim-centos-runtime:local ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-runtime-minimal-centos:${OSSIM_BRANCH}
                        docker push ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-runtime-minimal-centos:${OSSIM_BRANCH}
                    """

                }
            }
        }

        stage("Clean Workspace")
        {
            if ("${CLEAN_WORKSPACE}" == "true")
                step([$class: 'WsCleanup'])
        }
    }
}
}
